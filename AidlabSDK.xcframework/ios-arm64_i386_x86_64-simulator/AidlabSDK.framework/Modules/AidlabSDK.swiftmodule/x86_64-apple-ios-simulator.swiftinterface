// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AidlabSDK
@_exported import AidlabSDK
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
public protocol InternalDelegate : AnyObject {
  func didReceiveFirmwareInformation(updateAvailable: Swift.Bool, updatableVersion: Swift.String)
  func didReceivePressure(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Int32])
  func pressureWearStateDidChange(_ aidlab: IAidlab, state: WearState)
  func didReceiveSoundFeatures(_ aidlab: IAidlab, values: [Swift.Float])
}
public protocol AidlabSDKDelegate : AnyObject {
  func didDiscover(_ aidlab: CoreBluetooth.CBPeripheral, rssi: Foundation.NSNumber)
}
public protocol IAidlab : AnyObject {
  var address: Foundation.UUID? { get }
  var firmwareRevision: Swift.String? { get }
  var hardwareRevision: Swift.String? { get }
  var serialNumber: Swift.String? { get }
  var aidlabSynchronizationDelegate: AidlabSynchronizationDelegate? { get set }
  func send(_ command: Swift.String)
  func disconnect()
  func setECGFiltrationMethod(_ ecgFiltrationMethod: ECGFiltrationMethod)
  func readRSSI()
  func startSynchronization()
  func stopSynchronization()
  var internalAidlab: InternalAidlab { get set }
}
public protocol InternalUpdateDelegate : AnyObject {
  func didReceiveUpdateError(error: UpdateError)
  func didReceiveUpdateProgress(progress: Swift.UInt8)
  func didFinishUpdate()
}
public protocol InternalAidlabDelegate : AnyObject {
  var updateInternalDelegate: InternalUpdateDelegate? { get set }
  var internalDelegate: InternalDelegate? { get set }
  func requestForFirmwareInfo(url: Swift.String)
  func startFirmwareUpdate(url: Swift.String, updatableVersion: Swift.String)
  func stopFirmwareUpdate()
}
@objc @_hasMissingDesignatedInitializers public class Aidlab : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate, AidlabInteropDelegate, IAidlab, InternalAidlabDelegate {
  public var firmwareRevision: Swift.String?
  public var hardwareRevision: Swift.String?
  public var serialNumber: Swift.String?
  public var address: Foundation.UUID?
  public func readRSSI()
  public func disconnect()
  public func send(_ message: Swift.String)
  public func startSynchronization()
  public func stopSynchronization()
  public func setECGFiltrationMethod(_ ecgFiltrationMethod: ECGFiltrationMethod)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: Swift.Error?)
  public var aidlabSynchronizationDelegate: AidlabSynchronizationDelegate?
  public var internalAidlab: InternalAidlab {
    get
    set
  }
  public var updateInternalDelegate: InternalUpdateDelegate?
  public var internalDelegate: InternalDelegate?
  public func startFirmwareUpdate(url: Swift.String, updatableVersion: Swift.String)
  public func stopFirmwareUpdate()
  public func requestForFirmwareInfo(url: Swift.String)
  @objc public func didReceive(_ error: UpdateError)
  @objc public func didReceiveUpdateProgress(_ progress: Swift.UInt8)
  @objc public func didFinishUpdate()
  @objc public func sendFirmwareChunk(_ buffer: Swift.UnsafeMutablePointer<Swift.UInt8>!)
  public func didDisconnect(reason: DisconnectReason)
  public func didConnect()
  @objc public func didReceiveECG(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceiveRespiration(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceiveBatteryLevel(_ stateOfCharge: Swift.UInt8)
  @objc public func didReceiveSteps(_ timestamp: Swift.UInt64, value: Swift.UInt64)
  @objc public func didReceiveSkinTemperature(_ timestamp: Swift.UInt64, value: Swift.Float)
  @objc public func didReceiveAccelerometer(_ timestamp: Swift.UInt64, ax: Swift.Float, ay: Swift.Float, az: Swift.Float)
  @objc public func didReceiveGyroscope(_ timestamp: Swift.UInt64, gx: Swift.Float, gy: Swift.Float, gz: Swift.Float)
  @objc public func didReceiveMagnetometer(_ timestamp: Swift.UInt64, mx: Swift.Float, my: Swift.Float, mz: Swift.Float)
  @objc public func didReceiveQuaternion(_ timestamp: Swift.UInt64, qw: Swift.Float, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  @objc public func didReceiveOrientation(_ timestamp: Swift.UInt64, roll: Swift.Float, pitch: Swift.Float, yaw: Swift.Float)
  @objc public func didReceiveBodyPosition(_ timestamp: Swift.UInt64, bodyPosition: BodyPosition)
  @objc public func didReceiveHeartRate(_ timestamp: Swift.UInt64, heartRate: Swift.Int32)
  @objc public func didReceiveRr(_ timestamp: Swift.UInt64, rr: Swift.Int32)
  @objc public func didReceiveRespirationRate(_ timestamp: Swift.UInt64, value: Swift.UInt32)
  @objc public func wearStateDidChange(_ state: WearState)
  @objc public func didReceiveSoundVolume(_ timestamp: Swift.UInt64, soundVolume: Swift.UInt16)
  @objc public func didReceivePressure(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Int32>!, size: Swift.Int32)
  @objc public func pressureWearStateDidChange(_ state: WearState)
  @objc public func didDetect(_ exercise: Exercise)
  @objc public func didDetectActivity(_ timestamp: Swift.UInt64, activity: ActivityType)
  @objc public func didReceiveCommand()
  @objc public func didReceiveMessage(_ process: Swift.String, message: Swift.String)
  @objc public func didDetectUserEvent(_ timestamp: Swift.UInt64)
  @objc public func didReceiveSoundFeatures(_ values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceiveError(_ text: Swift.String)
  @objc public func didReceiveSignalQuality(_ timestamp: Swift.UInt64, value: Swift.Int32)
  @objc public func didReceivePastECG(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceivePastRespiration(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceivePastSkinTemperature(_ timestamp: Swift.UInt64, value: Swift.Float)
  @objc public func didReceivePastHeartRate(_ timestamp: Swift.UInt64, heartRate: Swift.Int32)
  @objc public func syncStateDidChange(_ state: SyncState)
  @objc public func didReceiveUnsynchronizedSize(_ unsynchronizedSize: Swift.UInt32, syncBytesPerSecond: Swift.Float)
  @objc public func didReceivePastRespirationRate(_ timestamp: Swift.UInt64, value: Swift.UInt32)
  @objc public func didReceivePastActivity(_ timestamp: Swift.UInt64, activity: ActivityType)
  @objc public func didReceivePastSteps(_ timestamp: Swift.UInt64, value: Swift.UInt64)
  @objc public func didReceivePastRr(_ timestamp: Swift.UInt64, rr: Swift.Int32)
  @objc public func didReceivePastSoundVolume(_ timestamp: Swift.UInt64, soundVolume: Swift.UInt16)
  @objc public func didReceivePastPressure(_ timestamp: Swift.UInt64, values: Swift.UnsafeMutablePointer<Swift.Int32>!, size: Swift.Int32)
  @objc public func didReceivePastSoundFeatures(_ values: Swift.UnsafeMutablePointer<Swift.Float>!, size: Swift.Int32)
  @objc public func didReceivePastAccelerometer(_ timestamp: Swift.UInt64, ax: Swift.Float, ay: Swift.Float, az: Swift.Float)
  @objc public func didReceivePastGyroscope(_ timestamp: Swift.UInt64, gx: Swift.Float, gy: Swift.Float, gz: Swift.Float)
  @objc public func didReceivePastQuaternion(_ timestamp: Swift.UInt64, qw: Swift.Float, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  @objc public func didReceivePastOrientation(_ timestamp: Swift.UInt64, roll: Swift.Float, pitch: Swift.Float, yaw: Swift.Float)
  @objc public func didReceivePastMagnetometer(_ timestamp: Swift.UInt64, mx: Swift.Float, my: Swift.Float, mz: Swift.Float)
  @objc public func didReceivePastBodyPosition(_ timestamp: Swift.UInt64, bodyPosition: BodyPosition)
  @objc public func didDetectPastUserEvent(_ timestamp: Swift.UInt64)
  @objc public func didReceivePastSignalQuality(_ timestamp: Swift.UInt64, value: Swift.Int32)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InternalAidlab {
  public var internalDelegate: InternalDelegate? {
    get
    set
  }
  public var updateInternalDelegate: InternalUpdateDelegate? {
    get
    set
  }
  public func requestForFirmwareInfo(url: Swift.String)
  public func startFirmwareUpdate(url: Swift.String, updatableVersion: Swift.String)
  public func stopFirmwareUpdate()
  @objc deinit
}
public protocol AidlabSynchronizationDelegate : AnyObject {
  func syncStateDidChange(_ aidlab: IAidlab, state: SyncState)
  func didReceivePastECG(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Float])
  func didReceivePastRespiration(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Float])
  func didReceivePastSkinTemperature(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.Float)
  func didReceivePastHeartRate(_ aidlab: IAidlab, timestamp: Swift.UInt64, heartRate: Swift.Int32)
  func didReceivePastRr(_ aidlab: IAidlab, timestamp: Swift.UInt64, rr: Swift.Int32)
  func didReceiveUnsynchronizedSize(_ aidlab: IAidlab, unsynchronizedSize: Swift.UInt32, syncBytesPerSecond: Swift.Float)
  func didReceivePastRespirationRate(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.UInt32)
  func didReceivePastActivity(_ aidlab: IAidlab, timestamp: Swift.UInt64, activity: ActivityType)
  func didReceivePastSteps(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.UInt64)
  func didReceivePastSoundVolume(_ aidlab: IAidlab, timestamp: Swift.UInt64, soundVolume: Swift.UInt16)
  func didReceivePastAccelerometer(_ aidlab: IAidlab, timestamp: Swift.UInt64, ax: Swift.Float, ay: Swift.Float, az: Swift.Float)
  func didReceivePastGyroscope(_ aidlab: IAidlab, timestamp: Swift.UInt64, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  func didReceivePastMagnetometer(_ aidlab: IAidlab, timestamp: Swift.UInt64, mx: Swift.Float, my: Swift.Float, mz: Swift.Float)
  func didReceivePastQuaternion(_ aidlab: IAidlab, timestamp: Swift.UInt64, qw: Swift.Float, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  func didReceivePastOrientation(_ aidlab: IAidlab, timestamp: Swift.UInt64, roll: Swift.Float, pitch: Swift.Float, yaw: Swift.Float)
  func didReceivePastBodyPosition(_ aidlab: IAidlab, timestamp: Swift.UInt64, bodyPosition: BodyPosition)
  func didReceivePastPressure(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Int32])
  func didReceivePastSoundFeatures(_ aidlab: IAidlab, values: [Swift.Float])
  func didDetectPastUserEvent(_ aidlab: IAidlab, timestamp: Swift.UInt64)
  func didReceivePastSignalQuality(_ timestamp: Swift.UInt64, value: Swift.Int32)
}
public enum ECGFiltrationMethod {
  case normal
  case aggressive
  public static func == (a: ECGFiltrationMethod, b: ECGFiltrationMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Signal : Swift.Int {
  case ecg
  case respiration
  case temperature
  case motion
  case battery
  case activity
  case orientation
  case steps
  case heartRate
  case healthThermometer
  case soundVolume
  case rr
  case pressure
  case soundFeatures
  case respirationRate
  case bodyPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum DisconnectReason : Swift.Int {
  case timeout
  case deviceDisconnected
  case appDisconnected
  case sdkOutdated
  case unknownError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ScanMode : Swift.Int {
  case lowPower
  case aggressive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AidlabSDK : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate, CentralManagerDelegate {
  public var legacyAutoPair: Swift.Bool
  public init(delegate: AidlabSDKDelegate)
  @objc deinit
  public func cancelPeripheralConnection()
  public func bytes() -> Swift.Int
  public func scan(scanMode: ScanMode = .lowPower)
  public func disconnect(_ peripheral: CoreBluetooth.CBPeripheral, reason: DisconnectReason)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  public func connect(signals: [Signal], peripheral: CoreBluetooth.CBPeripheral, aidlabDelegate: AidlabDelegate)
  public func stopScan()
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
public protocol AidlabDelegate : AnyObject {
  func didReceiveECG(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Float])
  func didReceiveRespiration(_ aidlab: IAidlab, timestamp: Swift.UInt64, values: [Swift.Float])
  func didReceiveBatteryLevel(_ aidlab: IAidlab, stateOfCharge: Swift.UInt8)
  func didReceiveSteps(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.UInt64)
  func didReceiveSkinTemperature(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.Float)
  func didReceiveAccelerometer(_ aidlab: IAidlab, timestamp: Swift.UInt64, ax: Swift.Float, ay: Swift.Float, az: Swift.Float)
  func didReceiveGyroscope(_ aidlab: IAidlab, timestamp: Swift.UInt64, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  func didReceiveMagnetometer(_ aidlab: IAidlab, timestamp: Swift.UInt64, mx: Swift.Float, my: Swift.Float, mz: Swift.Float)
  func didReceiveQuaternion(_ aidlab: IAidlab, timestamp: Swift.UInt64, qw: Swift.Float, qx: Swift.Float, qy: Swift.Float, qz: Swift.Float)
  func didReceiveOrientation(_ aidlab: IAidlab, timestamp: Swift.UInt64, roll: Swift.Float, pitch: Swift.Float, yaw: Swift.Float)
  func didReceiveBodyPosition(_ aidlab: IAidlab, timestamp: Swift.UInt64, bodyPosition: BodyPosition)
  func didReceiveHeartRate(_ aidlab: IAidlab, timestamp: Swift.UInt64, heartRate: Swift.Int32)
  func didReceiveRr(_ aidlab: IAidlab, timestamp: Swift.UInt64, rr: Swift.Int32)
  func didReceiveRespirationRate(_ aidlab: IAidlab, timestamp: Swift.UInt64, value: Swift.UInt32)
  func didReceiveSoundVolume(_ aidlab: IAidlab, timestamp: Swift.UInt64, soundVolume: Swift.UInt16)
  func didDetect(_ aidlab: IAidlab, exercise: Exercise)
  func didDetect(_ aidlab: IAidlab, timestamp: Swift.UInt64, activity: ActivityType)
  func didDisconnect(_ aidlab: IAidlab, reason: DisconnectReason)
  func didConnect(_ aidlab: IAidlab)
  func didReceiveError(_ aidlab: IAidlab, error: Swift.Error)
  func didReceiveRSSI(_ aidlab: IAidlab, rssi: Swift.Int32)
  func wearStateDidChange(_ aidlab: IAidlab, state: WearState)
  func didReceiveCommand(_ aidlab: IAidlab)
  func didReceiveMessage(_ aidlab: IAidlab, process: Swift.String, message: Swift.String)
  func didDetectUserEvent(_ aidlab: IAidlab, timestamp: Swift.UInt64)
  func didReceiveSignalQuality(_ timestamp: Swift.UInt64, value: Swift.Int32)
}
public protocol CentralManagerDelegate : AnyObject {
  func disconnect(_ peripheral: CoreBluetooth.CBPeripheral, reason: DisconnectReason)
}
extension ECGFiltrationMethod : Swift.Equatable {}
extension ECGFiltrationMethod : Swift.Hashable {}
extension Signal : Swift.Equatable {}
extension Signal : Swift.Hashable {}
extension Signal : Swift.RawRepresentable {}
extension DisconnectReason : Swift.Equatable {}
extension DisconnectReason : Swift.Hashable {}
extension DisconnectReason : Swift.RawRepresentable {}
extension ScanMode : Swift.Equatable {}
extension ScanMode : Swift.Hashable {}
extension ScanMode : Swift.RawRepresentable {}
